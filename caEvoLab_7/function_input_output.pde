/*******
 * Input-Output related functions
 */

/* TODO:
 * Try train to function as logic gates
 * write function to save ALife to file
 */

/* 
 * Output 
 */
 
/* Translate Agent table to Output table */
void translateAgentTableToOutputTable() {
  for (int counter = 0; counter < maxNumOfAgent; counter++) {
    if (tableAgent[counter][columnAgentFiringStatus] == 1) {
      int agentLocationCellID = tableAgent[counter][columnAgentLocationCellID];
      if (tableOutput[agentLocationCellID] == 0) {
        tableOutput[agentLocationCellID] = 1;
      } else {
        boolean locationPushed = false;
        int pushTarget = agentLocationCellID;
        int pushTryCount = 0;
        while (locationPushed == false) {
          pushTarget++;
          if (pushTarget == totalGridWorldCell) {
            pushTarget = 0;
            pushTryCount++;
          } else {
            if (pushTryCount > 1) {
              break;
            } else { // do nothing
            } // end if else
          } // end if else
          if (tableOutput[pushTarget] == 0) {
            tableOutput[pushTarget] = 1;
            locationPushed = true;
          } else {
            locationPushed = false;
          } // end if else
        } // end while
      } // end if else
    } else { // do nothing
    } // end if else
  } // end for
} // end translateAgentTableToOutputTable

/* Get Output line value from Output table */
int getOutputLineValue (int outputLineID) {
  int outputValue = 0;
  // Get value from each Input line
  for (int counter = 0; counter < numOfInputLine; counter++) {
    int cellID = (counter * ioBitResolution) + outputLineID * (numOfInputLine * numOfCellAlongX);
    // Create and initialize array to store values read from Output table
    int[] binaryValue = new int[ioBitResolution];
    for (int counterBit = 0; counterBit < ioBitResolution; counterBit++) {
      binaryValue[counterBit] = 0;
    } // end for
    // Read and store value
    for (int counterBinary = 0; counterBinary < ioBitResolution; counterBinary++) {
      binaryValue[counterBinary] = tableOutput[cellID];
      cellID++;
    } // end for
    // Convert the binary value integer array to string
    String binaryValueString = join(nf(binaryValue,0),"");
    outputValue = outputValue + unbinary(binaryValueString);
  } // end for
  // Averaging all values generated by each input
  outputValue = outputValue / numOfInputLine;
  return outputValue;
} // end getOutputLineValue

/* Store output value to Output array */
void storeOutputValueToOutputArray() {
  for (int counter = 0; counter < numOfOutputLine; counter++) {
    valueOutput[counter] = getOutputLineValue(counter);
  } // end for
} // end storeOutputValueToOutputArray

/* 
 * Input 
 */
 
void translateInputArrayToInputTable() {
  for (int counter = 0; counter < numOfInputLine; counter++) {
    int theValue = valueInput[counter];
    convertInputLineValueToInputTable(counter, theValue);
  } // end for
} // end translateInputArrayToInputTable

/* Convert Input line value into binary and enter into Input table */
// inputLineID starts from 0
void convertInputLineValueToInputTable (int inputLineID, int value) {
  for (int counter = 0; counter < numOfOutputLine; counter++) {
    // Convert value to binary
    String binaryValue = binary(value, ioBitResolution);
    int cellID = counter * (numOfInputLine * numOfCellAlongX) + (inputLineID * numOfCellAlongX);
    // Insert binary value into respective cells
    for (int counterBinary = 0; counterBinary < ioBitResolution; counterBinary++) {
      tableInput[cellID] = int(binaryValue.charAt(counterBinary)) - 48; // 48 is index number for char '0'
      cellID++;
    } // end for
  } // end for
} // end convertInputLineValueToInputTable
